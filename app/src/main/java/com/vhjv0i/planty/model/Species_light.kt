/**
 * Trefle API v1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.models

/**
 * The symonyms scientific names
 * @param id An unique identifier
 * @param commonName The usual common name, in english, of the species (if any).
 * @param slug An unique human-readable identifier (if you can, prefer to use this over id)
 * @param scientificName The scientific name follows the [Binomial nomenclature](https://en.wikipedia.org/wiki/Binomial_nomenclature), and represents its genus and its species within the genus, resulting in a single worldwide name for each organism. The scientific name of an infraspecific taxons (ranks below species, such as subspecies, forms, varieties...) is a combination of the name of a species and an infraspecific epithet. A connecting term is used to denote the rank. [See IAPT recommendation](https://www.iapt-taxon.org/nomen/pages/main/art_24.html)
 * @param year The first publication year of a valid name of this species. [See author citation](https://en.wikipedia.org/wiki/Author_citation_(botany))
 * @param bibliography The first publication of a valid name of this species. [See author citation](https://en.wikipedia.org/wiki/Author_citation_(botany))
 * @param author The author(s) of the first publication of a valid name of this species. [See author citation](https://en.wikipedia.org/wiki/Author_citation_(botany))
 * @param status The acceptance status of this species by IPNI
 * @param rank The [taxonomic rank](https://en.wikipedia.org/wiki/Taxonomic_rank) of the species
 * @param familyCommonName The common name (in english) of the species family
 * @param family The scientific name of the species family
 * @param genusId The id of the species genus
 * @param genus The scientific name of the species genus
 * @param imageUrl A main image url of the species
 * @param links 
 * @param synonyms The symonyms scientific names
 */
data class SpeciesLight (

    /* An unique identifier */
    val id: kotlin.Int,
    /* The usual common name, in english, of the species (if any). */
    val commonName: kotlin.String? = null,
    /* An unique human-readable identifier (if you can, prefer to use this over id) */
    val slug: kotlin.String,
    /* The scientific name follows the [Binomial nomenclature](https://en.wikipedia.org/wiki/Binomial_nomenclature), and represents its genus and its species within the genus, resulting in a single worldwide name for each organism. The scientific name of an infraspecific taxons (ranks below species, such as subspecies, forms, varieties...) is a combination of the name of a species and an infraspecific epithet. A connecting term is used to denote the rank. [See IAPT recommendation](https://www.iapt-taxon.org/nomen/pages/main/art_24.html) */
    val scientificName: kotlin.String,
    /* The first publication year of a valid name of this species. [See author citation](https://en.wikipedia.org/wiki/Author_citation_(botany)) */
    val year: kotlin.Int? = null,
    /* The first publication of a valid name of this species. [See author citation](https://en.wikipedia.org/wiki/Author_citation_(botany)) */
    val bibliography: kotlin.String? = null,
    /* The author(s) of the first publication of a valid name of this species. [See author citation](https://en.wikipedia.org/wiki/Author_citation_(botany)) */
    val author: kotlin.String? = null,
    /* The acceptance status of this species by IPNI */
    val status: SpeciesLight.Status,
    /* The [taxonomic rank](https://en.wikipedia.org/wiki/Taxonomic_rank) of the species */
    val rank: SpeciesLight.Rank,
    /* The common name (in english) of the species family */
    val familyCommonName: kotlin.String? = null,
    /* The scientific name of the species family */
    val family: kotlin.String,
    /* The id of the species genus */
    val genusId: kotlin.Int,
    /* The scientific name of the species genus */
    val genus: kotlin.String,
    /* A main image url of the species */
    val imageUrl: kotlin.String? = null,
) {
    /**
    * The acceptance status of this species by IPNI
    * Values: ACCEPTED,UNKNOWN
    */
    enum class Status(val value: kotlin.String){
        ACCEPTED("accepted"),
        UNKNOWN("unknown");
    }
    /**
    * The [taxonomic rank](https://en.wikipedia.org/wiki/Taxonomic_rank) of the species
    * Values: SPECIES,SSP,VAR,FORM,HYBRID,SUBVAR
    */
    enum class Rank(val value: kotlin.String){
        SPECIES("species"),
        SSP("ssp"),
        VAR("var"),
        FORM("form"),
        HYBRID("hybrid"),
        SUBVAR("subvar");
    }
}